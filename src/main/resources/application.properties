spring.config.import=optional:file:.env[.properties]

spring.datasource.url=jdbc:postgresql://${PGHOST:localhost}:${PGPORT:5432}/${PGDATABASE:umarket}?createDatabaseIfNotExist=true&serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=${PGUSER:postgres}
spring.datasource.password=${PGPASSWORD:1111}

springdoc.api-docs.path=/swagger/api-docs
springdoc.swagger-ui.path=/swagger/swagger-ui.html
swagger.value.dev-url=https://localhost:8080
swagger.value.prod-url=https://backend-production-448a.up.railway.app


spring.liquibase.enabled=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql = true

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${GMAIL_USERNAME}
spring.mail.password=${GMAIL_PASSWORD}

jwt.secret-key=${JWT_SECRET_KEY}

mail.code.expiration.time=1800000
mail.base.url=http://pawo.space/#/login
mail.request.login-page.url=/log-in
mail.request.recover-password-page.url=/recover/new

spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000
spring.mail.properties.mail.smtp.starttls.enable=true

cloud.aws.credentials.access-key=${AWS_ACCESS_KEY}
cloud.aws.credentials.secret-key=${AWS_SECRET_KEY}
cloud.aws.region.static=eu-west-1
application.bucket.name=${AWS_BUCKET_NAME}

file.upload.minSize=100
file.upload.maxSize=10485760

spring.application.name=uAuto
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2MB
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=10MB

cloudinary.cloud-name=${CLOUD_NAME}
cloudinary.api-key=${API_KEY}
cloudinary.api-secret=${API_SECRET}
cloudinary.default.not-found-photo=https://res.cloudinary.com/de4bysqtm/image/upload/v1697906978/czkhxykmkfn92deqncp5.jpg

spring.security.oauth2.client.registration.google.client-id=${GOOGLE-CLIENT-ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE-CLIENT-SECRET}


#spring.security.oauth2.client.registration.auth0.client-id=${AUTH0-CLIENT-ID}
#spring.security.oauth2.client.registration.auth0.client-secret=${AUTH0-CLIENT-SECRET}
#spring.security.oauth2.client.provider.auth0.issuer-uri=${AUTH0-CLIENT-ISSUER-URI}
#spring.security.oauth2.client.registration.auth0.scope[0]=openid
#spring.security.oauth2.client.registration.auth0.scope[1]=profile
#spring.security.oauth2.client.registration.auth0.scope[2]=email
#spring.security.oauth2.client.registration.auth0.scope[3]=name
#spring.security.oauth2.client.registration.auth0.scope[4]=nickname
#spring.security.oauth2.client.registration.auth0.scope[5]=picture
#spring.security.oauth2.client.registration.auth0.scope[6]=phone